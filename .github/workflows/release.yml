name: Build + Release Wheels

on:
  workflow_dispatch:
    inputs:
      llvm_version:
        description: "LLVM version to build"
        required: false
        default: ""
      wheel_version:
        description: "Versioning of the wheel packaging (appended to LLVM version)"
        required: false
        default: "0"
  release:
    types:
      - published

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }} (arch=${{ matrix.arch }})
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            arch: "x86_64"
          - os: ubuntu-20.04
            arch: "i686"
          - os: ubuntu-20.04
            arch: "aarch64"
          - os: ubuntu-20.04
            arch: "ppc64le"
          - os: ubuntu-20.04
            arch: "s390x"
          - os: windows-2016
            arch: "AMD64"
          - os: windows-2016
            arch: "x86"
          - os: macos-10.15
            arch: "universal2"

    steps:
    - uses: actions/checkout@v2
    
    - name: Support long paths
      if: runner.os == 'Windows'
      run: git config --system core.longpaths true

    - name: Override LLVM version (${{ github.event.inputs.llvm_version }})
      if: github.event.inputs.llvm_version
      run: |
        echo "set(CLANG_FORMAT_VERSION ${{ github.event.inputs.llvm_version }})" > clang-format_version.cmake
        echo "set(CLANG_FORMAT_WHEEL_VERSION ${{ github.event.inputs.wheel_version }})" >> clang-format_version.cmake

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1.2.0
      if: runner.os == 'Linux'

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.1.2
      env:
        CIBW_ARCHS: "${{ matrix.arch }}"

    - uses: actions/upload-artifact@v2
      with:
        path: ./wheelhouse/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Override LLVM version (${{ github.event.inputs.llvm_version }})
        if: github.event.inputs.llvm_version
        run: |
          echo "set(CLANG_FORMAT_VERSION ${{ github.event.inputs.llvm_version }})" > clang-format_version.cmake
          echo "set(CLANG_FORMAT_WHEEL_VERSION ${{ github.event.inputs.wheel_version }})" >> clang-format_version.cmake
 
      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz
  
  test-sdist:
    name: Test build from source distribution
    needs: [build-sdist]
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.9'

      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: sdist

      - name: Install from SDist
        run:
          pip install sdist/*.tar.gz

      - name: Install test requirements
        run:
          python -m pip install -r requirements-dev.txt

      - name: Run test suite
        run:
          python -m pytest

  upload_pypi:
    name: Upload to PyPI
    needs: [build-wheels, build-sdist, test-sdist]
    runs-on: ubuntu-20.04
    if: github.repository_owner == 'dokempf'

    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - name: Upload to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
